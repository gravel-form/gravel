{"version":3,"sources":["json-schema-traverse.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAuEjE,wBAAgB,kBAAkB,CAChC,MAAM,EAAE,WAAW,EACnB,WAAW,EAAE,MAAM,GAClB;IAAE,MAAM,EAAE,qBAAqB,CAAC;IAAC,IAAI,EAAE,MAAM,EAAE,CAAA;CAAE,GAAG,IAAI,CAK1D;AAmCD,wBAAiB,QAAQ,CACvB,MAAM,EAAE,WAAW,GAClB,SAAS,CAAC;IAAE,MAAM,EAAE,WAAW,CAAC;IAAC,IAAI,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAA;CAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAE3E;AAED,eAAe,QAAQ,CAAC","file":"json-schema-traverse.d.ts","sourcesContent":["import { JSONSchema7Definition, JSONSchema7 } from 'json-schema';\n\nconst keywords: (keyof Pick<\n  JSONSchema7,\n  'additionalItems' | 'items' | 'contains' | 'additionalProperties' | 'propertyNames' | 'not' | 'if' | 'then' | 'else'\n>)[] = ['additionalItems', 'items', 'contains', 'additionalProperties', 'propertyNames', 'not', 'if', 'then', 'else'];\n\nconst arrayKeywords: (keyof Pick<JSONSchema7, 'items' | 'allOf' | 'anyOf' | 'oneOf'>)[] = [\n  'items',\n  'allOf',\n  'anyOf',\n  'oneOf',\n];\n\nconst propsKeywords: (keyof Pick<\n  JSONSchema7,\n  'definitions' | 'properties' | 'patternProperties' | 'dependencies'\n>)[] = ['definitions', 'properties', 'patternProperties', 'dependencies'];\n\nfunction parseLocalJSONPointer(pointer: string): string[] {\n  return pointer\n    .slice(2)\n    .split('/')\n    .map((str) => {\n      return decodeURIComponent(str)\n        .replace(/~1/g, '/')\n        .replace(/~0/g, '~');\n    });\n}\n\nfunction _getSchema(schema: JSONSchema7, path: string[]): JSONSchema7Definition | null {\n  let _schema: JSONSchema7Definition | undefined;\n  let next: JSONSchema7Definition | undefined = schema;\n  let i = 0;\n  while (i < path.length) {\n    _schema = next;\n    next = undefined;\n    if (!_schema || typeof _schema !== 'object') return null;\n    for (const key of propsKeywords) {\n      if (key !== path[i]) continue;\n\n      const sch: { [key: string]: JSONSchema7Definition | string[] } | undefined = _schema[key];\n      if (!sch || typeof sch !== 'object') return null;\n      const _next: JSONSchema7Definition | string[] = sch[path[i + 1]];\n      if (Array.isArray(_next)) break;\n      next = _next;\n      i += 2;\n    }\n    if (next) continue;\n\n    for (const key of arrayKeywords) {\n      if (key !== path[i]) continue;\n      const sch: JSONSchema7Definition[] | JSONSchema7Definition | undefined = _schema[key];\n      if (!Array.isArray(sch)) break;\n      next = sch[+path[i + 2]];\n      i += 2;\n    }\n    if (next) continue;\n\n    for (const key of keywords) {\n      if (key !== path[i]) continue;\n      const sch: JSONSchema7Definition[] | JSONSchema7Definition | undefined = _schema[key];\n      if (!sch || Array.isArray(sch)) return null;\n      next = sch;\n      i += 1;\n    }\n  }\n\n  return next || null;\n}\n\nexport function getSchemaByPointer(\n  schema: JSONSchema7,\n  jsonPointer: string\n): { schema: JSONSchema7Definition; path: string[] } | null {\n  const path = parseLocalJSONPointer(jsonPointer);\n  const sch = _getSchema(schema, path);\n\n  return sch ? { schema: sch, path } : null;\n}\n\nfunction* _traverse(\n  schema: JSONSchema7Definition,\n  path: (string | number)[]\n): Generator<{ schema: JSONSchema7; path: (string | number)[] }, void, void> {\n  if (schema && typeof schema === 'object' && !Array.isArray(schema)) {\n    yield { schema, path };\n    for (const key of propsKeywords) {\n      const sch: { [key: string]: JSONSchema7Definition | string[] } | undefined = schema[key];\n      if (sch && typeof sch == 'object') {\n        for (const prop in sch) {\n          const child = sch[prop];\n          if (Array.isArray(child) || typeof child !== 'object') continue;\n          yield* _traverse(child, [...path, key, prop]);\n        }\n      }\n    }\n\n    for (const key of arrayKeywords) {\n      const sch: JSONSchema7Definition[] | JSONSchema7Definition | undefined = schema[key];\n      if (!Array.isArray(sch)) continue;\n      for (const i in sch) {\n        yield* _traverse(sch[i], [...path, key, i]);\n      }\n    }\n\n    for (const key of keywords) {\n      const sch: JSONSchema7Definition[] | JSONSchema7Definition | undefined = schema[key];\n      if (!sch || Array.isArray(sch)) continue;\n      yield* _traverse(sch, [...path, key]);\n    }\n  }\n}\n\nexport function* traverse(\n  schema: JSONSchema7\n): Generator<{ schema: JSONSchema7; path: (string | number)[] }, void, void> {\n  yield* _traverse(schema, []);\n}\n\nexport default traverse;\n"]}
{"version":3,"sources":["utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AACpD,OAAgB,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAErD,MAAM,WAAW,mBAAmB,CAAC,EAAE,GAAG,EAAE,CAAE,SAAQ,eAAe;IACnE,MAAM,EAAE,qBAAqB,CAAC;IAC9B,MAAM,EAAE,mBAAmB,GAAG,IAAI,CAAC;IACnC,IAAI,EAAE,GAAG,CAAC;IACV,QAAQ,EAAE,QAAQ,CAAC;IACnB,UAAU,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;IAChC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;IAC9B,mBAAmB,EAAE,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC9D,SAAS,EAAE,SAAS,GAAG,EAAE,CAAC;CAC3B;AAED,MAAM,WAAW,aAAa;IAC5B,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC;IACvC,SAAS,EAAE,KAAK,CAAC,YAAY,EAAE,GAAG,IAAI,CAAC;CACxC;AAED,MAAM,WAAW,2BAA4B,SAAQ,mBAAmB;IACtE,MAAM,EAAE,CAAC,QAAQ,EAAE,MAAM,KAAK,IAAI,CAAC;CACpC;AAED,MAAM,WAAW,SAAS;IACxB,MAAM,EAAE,qBAAqB,CAAC;IAC9B,WAAW,EAAE,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE,CAAC;IACnG,IAAI,CAAC,EAAE,GAAG,CAAC;IACX,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,KAAK,IAAI,CAAC;CAChC;AAMD,wBAAgB,cAAc,CAAC,KAAK,EAAE,mBAAmB,GAAG,CAAC,CAAC,GAAG,EAAE,MAAM,GAAG,MAAM,KAAK,mBAAmB,CAAC,GAAG,IAAI,CA8BjH;AAED,wBAAgB,aAAa,CAC3B,KAAK,EAAE,mBAAmB,EAC1B,sBAAsB,EAAE,KAAK,CAAC,aAAa,CAAC,2BAA2B,CAAC,GAAG,IAAI,GAC9E,aAAa,CA0Df;AAED,wBAAgB,gBAAgB,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,GAAG,MAAM,CAEtE;AAED,wBAAgB,UAAU,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,mBAAmB,GAAG,OAAO,CAS7E;AAED,eAAO,MAAM,kBAAkB,EAAE,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAc5D,CAAC;AAEF,eAAO,MAAM,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,SAAS,CAkBxC,CAAC;AAEF,eAAe,QAAQ,CAAC","file":"utils.d.ts","sourcesContent":["import React from 'react';\nimport { JSONSchema7Definition } from 'json-schema';\nimport compose, { MiddlewareProps } from './compose';\n\nexport interface FormMiddlewareProps<FP = {}> extends MiddlewareProps {\n  schema: JSONSchema7Definition;\n  parent: FormMiddlewareProps | null;\n  data: any;\n  onChange: Function;\n  schemaPath: (string | number)[];\n  dataPath: (string | number)[];\n  MiddlewareComponent: React.ComponentType<FormMiddlewareProps>;\n  formProps: FormProps & FP;\n}\n\nexport interface UseAdditional {\n  onAdd: ((newData: any) => void) | null;\n  arrayBody: React.ReactElement[] | null;\n}\n\nexport interface AdditionalItemTemplateProps extends FormMiddlewareProps {\n  onMove: (newIndex: number) => void;\n}\n\nexport interface FormProps {\n  schema: JSONSchema7Definition;\n  middlewares: React.ComponentType<FormMiddlewareProps> | React.ComponentType<FormMiddlewareProps>[];\n  data?: any;\n  onChange?: (data: any) => void;\n}\n\nconst noop = () => { };\n\nconst Null = () => null;\n\nexport function bindChildProps(props: FormMiddlewareProps): ((key: string | number) => FormMiddlewareProps) | null {\n  const { schema, onChange, schemaPath, dataPath } = props;\n  const data = props.data || {};\n  if (typeof schema === 'boolean') return null;\n  if (schema.type === 'object' && schema.properties) {\n    const properties = schema.properties;\n    return (key) => ({\n      ...props,\n      schema: properties[key],\n      data: data[key],\n      onChange: (value: any) => onChange({ ...data, [key]: value }),\n      schemaPath: [...schemaPath, 'properties', key],\n      dataPath: [...dataPath, key],\n      parent: props,\n      next: Null,\n    });\n  } else if (schema.type === 'array' && Array.isArray(schema.items)) {\n    const items = schema.items;\n    return (key) => ({\n      ...props,\n      schema: items[key as number],\n      data: data[key],\n      onChange: (value: any) => onChange([...data.slice(0, +key), value, ...data.slice(+key + 1)]),\n      schemaPath: [...schemaPath, 'items', key],\n      dataPath: [...dataPath, key],\n      parent: props,\n      next: Null,\n    });\n  }\n  return null;\n}\n\nexport function useAdditional(\n  props: FormMiddlewareProps,\n  AdditionalItemTemplate: React.ComponentType<AdditionalItemTemplateProps> | null\n): UseAdditional {\n  const { schema, schemaPath, dataPath, onChange, MiddlewareComponent } = props;\n  if (!schema || typeof schema === 'boolean' || typeof schema.items === 'boolean')\n    return { onAdd: null, arrayBody: null };\n  const data = props.data || Array.from(Array.isArray(schema.items) ? { length: schema.items!.length } : []);\n\n  const onAdd = (newData: any) => onChange([...data, newData]);\n  const onMove = (from: number, to: number) => {\n    if (to < 0 || to >= data.length) {\n      onChange([...data.slice(0, from), ...data.slice(from + 1)]);\n    } else if (from < to) {\n      onChange([...data.slice(0, from), ...data.slice(from + 1, to + 1), data[from], ...data.slice(to + 1)]);\n    } else if (from > to) {\n      onChange([...data.slice(0, to), data[from], ...data.slice(to, from), ...data.slice(from + 1)]);\n    }\n  };\n\n  const [itemSchema, minIndex] = Array.isArray(schema.items)\n    ? [schema.additionalItems, schema.items.length]\n    : [schema.items, 0];\n  if (!itemSchema) return { onAdd: null, arrayBody: null };\n\n  const childNext = (props: FormMiddlewareProps) => <MiddlewareComponent {...props} next={Null} />;\n\n  const bindChildProps: (i: number) => FormMiddlewareProps = (i) => ({\n    ...props,\n    onChange: (value: any) => onChange([...data.slice(0, i), value, ...data.slice(i + 1)]),\n    schema: itemSchema,\n    data: data[i],\n    schemaPath: [...schemaPath, 'items', i],\n    dataPath: [...dataPath, i],\n    parent: props,\n  });\n\n  let arrayBody: React.ReactElement[] = [];\n  for (let i = minIndex; i < data.length; i += 1) {\n    arrayBody.push(\n      AdditionalItemTemplate ? (\n        <AdditionalItemTemplate\n          key={i}\n          {...bindChildProps(i)}\n          onMove={(newIndex) => {\n            if (newIndex < 0 || (newIndex >= minIndex && newIndex < data.length)) {\n              onMove(i, newIndex);\n            }\n          }}\n          next={childNext}\n        />\n      ) : (\n          <MiddlewareComponent key={i} {...bindChildProps(i)} next={childNext} />\n        )\n    );\n  }\n\n  return {\n    onAdd,\n    arrayBody,\n  };\n}\n\nexport function toJSONSchemaPath(dataPath: (string | number)[]): string {\n  return dataPath.map((key) => (typeof key === 'number' ? `[${key}]` : '.' + key)).join('');\n}\n\nexport function isRequired({ parent, dataPath }: FormMiddlewareProps): boolean {\n  const field = dataPath[dataPath.length - 1];\n  return !!(\n    parent &&\n    typeof parent.schema !== 'boolean' &&\n    parent.schema.required &&\n    typeof field === 'string' &&\n    parent.schema.required.includes(field)\n  );\n}\n\nexport const FixedObjectArrayMw: React.FC<FormMiddlewareProps> = (props) => {\n  const { schema, next, MiddlewareComponent } = props;\n  const getChildProps = bindChildProps(props);\n  if (!getChildProps) return next(props);\n  if (typeof schema === 'boolean') return next(props);\n  const children = schema.properties || schema.items;\n  if (!children) return next(props);\n  return (\n    <>\n      {Object.keys(children).map((key) => (\n        <MiddlewareComponent key={key} {...getChildProps(key)} />\n      ))}\n    </>\n  );\n};\n\nexport const FormCore: React.FC<FormProps> = (props) => {\n  const { schema, data, middlewares, onChange, ...rest } = props;\n  const Composed = React.useMemo(() => (Array.isArray(middlewares) ? compose(middlewares) : middlewares), [\n    middlewares,\n  ]);\n  return (\n    <Composed\n      schema={schema}\n      onChange={onChange || noop}\n      data={data}\n      schemaPath={[]}\n      dataPath={[]}\n      parent={null}\n      next={Null}\n      MiddlewareComponent={Composed}\n      formProps={props}\n    />\n  );\n};\n\nexport default FormCore;\n"]}
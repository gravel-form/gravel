{"version":3,"sources":["utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AACjE,OAAgB,EAAE,eAAe,EAAE,MAAM,WAAW,CAAC;AAGrD,UAAU,cAAc;IACtB,MAAM,EAAE,qBAAqB,CAAC;IAC9B,IAAI,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;CAC3B;AAED,MAAM,WAAW,mBAAmB,CAAC,EAAE,GAAG,EAAE,CAAE,SAAQ,eAAe;IACnE,MAAM,EAAE,qBAAqB,CAAC;IAC9B,MAAM,EAAE,mBAAmB,GAAG,IAAI,CAAC;IACnC,IAAI,EAAE,OAAO,CAAC;IACd,QAAQ,EAAE,QAAQ,CAAC;IACnB,UAAU,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;IAChC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,CAAC;IAC9B,mBAAmB,EAAE,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC9D,SAAS,EAAE,SAAS,GAAG,EAAE,CAAC;IAC1B,SAAS,CAAC,EAAE;QAAE,CAAC,GAAG,EAAE,MAAM,GAAG,cAAc,CAAA;KAAE,CAAC;CAC/C;AAED,MAAM,WAAW,SAAS;IACxB,MAAM,EAAE,WAAW,CAAC;IACpB,WAAW,EAAE,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,GAAG,KAAK,CAAC,aAAa,CAAC,mBAAmB,CAAC,EAAE,CAAC;IACnG,IAAI,CAAC,EAAE,OAAO,CAAC;IACf,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,KAAK,IAAI,CAAC;CACpC;AAMD,wBAAgB,gBAAgB,CAAC,QAAQ,EAAE,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE,GAAG,MAAM,CAEtE;AAED,wBAAgB,UAAU,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,mBAAmB,GAAG,OAAO,CAS7E;AAED,eAAO,MAAM,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAuBvD,CAAC;AAEF,eAAO,MAAM,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAwBtD,CAAC;AA4BF,eAAO,MAAM,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,mBAAmB,CAwBpD,CAAC;AAEF,eAAO,MAAM,SAAS,qCAA4C,CAAC;AAEnE,eAAO,MAAM,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,SAAS,CAkBxC,CAAC;AAEF,eAAe,QAAQ,CAAC","file":"utils.d.ts","sourcesContent":["import React from 'react';\nimport { JSONSchema7Definition, JSONSchema7 } from 'json-schema';\nimport compose, { MiddlewareProps } from './compose';\nimport { traverse, getSchemaByPointer } from './json-schema-traverse';\n\ninterface SchemaLocalRef {\n  schema: JSONSchema7Definition;\n  path: (string | number)[];\n}\n\nexport interface FormMiddlewareProps<FP = {}> extends MiddlewareProps {\n  schema: JSONSchema7Definition;\n  parent: FormMiddlewareProps | null;\n  data: unknown;\n  onChange: Function;\n  schemaPath: (string | number)[];\n  dataPath: (string | number)[];\n  MiddlewareComponent: React.ComponentType<FormMiddlewareProps>;\n  formProps: FormProps & FP;\n  localRefs?: { [key: string]: SchemaLocalRef };\n}\n\nexport interface FormProps {\n  schema: JSONSchema7;\n  middlewares: React.ComponentType<FormMiddlewareProps> | React.ComponentType<FormMiddlewareProps>[];\n  data?: unknown;\n  onChange?: (data: unknown) => void;\n}\n\nconst noop = () => {};\n\nconst Null = () => null;\n\nexport function toJSONSchemaPath(dataPath: (string | number)[]): string {\n  return dataPath.map((key) => (typeof key === 'number' ? `[${key}]` : '.' + key)).join('');\n}\n\nexport function isRequired({ parent, dataPath }: FormMiddlewareProps): boolean {\n  const field = dataPath[dataPath.length - 1];\n  return !!(\n    parent &&\n    typeof parent.schema !== 'boolean' &&\n    parent.schema.required &&\n    typeof field === 'string' &&\n    parent.schema.required.includes(field)\n  );\n}\n\nexport const FixedObjectMw: React.FC<FormMiddlewareProps> = (props) => {\n  const { schema, schemaPath, dataPath, onChange, MiddlewareComponent, next } = props;\n  if (typeof schema === 'boolean' || schema.type !== 'object') return next(props);\n  const data: any = (typeof props.data === 'object' && props.data) || {};\n  const properties = schema.properties;\n  if (!properties) return next(props);\n  return (\n    <>\n      {Object.keys(properties).map((key) => (\n        <MiddlewareComponent\n          key={key}\n          {...props}\n          schema={properties[key]}\n          data={Object.hasOwnProperty.call(data, key) ? data[key] : undefined}\n          onChange={(value: unknown) => onChange({ ...data, [key]: value })}\n          schemaPath={[...schemaPath, 'properties', key]}\n          dataPath={[...dataPath, key]}\n          parent={props}\n          next={Null}\n        />\n      ))}\n    </>\n  );\n};\n\nexport const FixedArrayMw: React.FC<FormMiddlewareProps> = (props) => {\n  const { schema, schemaPath, dataPath, onChange, MiddlewareComponent, next } = props;\n  if (typeof schema === 'boolean' || schema.type !== 'array' || !schema.items || !Array.isArray(schema.items))\n    return next(props);\n  const data: unknown[] = (Array.isArray(props.data) && props.data) || [];\n  const items = schema.items;\n\n  return (\n    <>\n      {items.map((item, index) => (\n        <MiddlewareComponent\n          key={index}\n          {...props}\n          schema={items[index]}\n          data={item}\n          onChange={(value: unknown) => onChange([...data.slice(0, +index), value, ...data.slice(+index + 1)])}\n          schemaPath={[...schemaPath, 'items', index]}\n          dataPath={[...dataPath, index]}\n          parent={props}\n          next={Null}\n        />\n      ))}\n    </>\n  );\n};\n\nfunction resolveSchemaRef(\n  rootSchema: JSONSchema7,\n  refs: { [key: string]: SchemaLocalRef },\n  ref: string\n): SchemaLocalRef | null {\n  const stack: string[] = [];\n  let result: SchemaLocalRef | null = null;\n  let _ref: string = ref;\n  while (!stack.includes(_ref)) {\n    if (ref.startsWith('#/')) {\n      result = getSchemaByPointer(rootSchema, ref);\n    } else if (ref.startsWith('#')) {\n      const id = ref;\n      result = refs[id];\n    }\n    if (!result) return null;\n    if (typeof result.schema !== 'object' || !result.schema.$ref) {\n      return result;\n    }\n    stack.push(_ref);\n    _ref = result.schema.$ref;\n    result = null;\n  }\n  return null;\n}\n\nexport const LocalRefMw: React.FC<FormMiddlewareProps> = (props) => {\n  const { schema, formProps, next, MiddlewareComponent, localRefs } = props;\n\n  const refs: { [key: string]: SchemaLocalRef } = React.useMemo(() => {\n    if (localRefs) return localRefs;\n    const refs: { [key: string]: SchemaLocalRef } = {};\n    for (const ref of traverse(formProps.schema)) {\n      const $id = ref.schema.$id;\n      if (!$id || !$id.startsWith('#')) continue;\n      refs[$id] = ref;\n    }\n    return refs;\n  }, [formProps.schema, localRefs]);\n\n  const nextProps = refs !== localRefs ? props : { ...props, localRefs: refs };\n  if (typeof schema === 'boolean' || !schema.$ref || !schema.$ref.startsWith('#')) return next(nextProps);\n\n  const child = schema.$ref ? resolveSchemaRef(formProps.schema, refs, schema.$ref) : null;\n  //console.log(child);\n  //return next(nextProps);\n\n  if (!child || child.schema === schema) return next(nextProps);\n\n  return <MiddlewareComponent {...nextProps} schema={child.schema} schemaPath={child.path} />;\n};\n\nexport const schemaMws = [FixedObjectMw, FixedArrayMw, LocalRefMw];\n\nexport const FormCore: React.FC<FormProps> = (props) => {\n  const { schema, data, middlewares, onChange } = props;\n  const Composed = React.useMemo(() => (Array.isArray(middlewares) ? compose(middlewares) : middlewares), [\n    middlewares,\n  ]);\n  return (\n    <Composed\n      schema={schema}\n      onChange={onChange || noop}\n      data={data}\n      schemaPath={[]}\n      dataPath={[]}\n      parent={null}\n      next={Null}\n      MiddlewareComponent={Composed}\n      formProps={props}\n    />\n  );\n};\n\nexport default FormCore;\n"]}